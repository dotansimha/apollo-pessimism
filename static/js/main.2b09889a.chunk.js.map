{"version":3,"sources":["App.js","index.js"],"names":["singleton","name","this","Item","itemId","result","useQuery","gql","variables","id","context","loading","error","data","item","App","React","useState","mounted","setMounted","setId","updateId","useCallback","faker","random","word","unmount","onClick","client","ApolloClient","assumeImmutableResults","cache","InMemoryCache","addTypename","resultCaching","resolvers","Query","_","value","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4cAWMA,EAAY,IALhB,WAAYC,GAAO,oBACjBC,KAAKD,KAAOA,EAIE,gBAElB,SAASE,EAAT,GAA2B,IAAXC,EAAU,EAAVA,OACRC,EAASC,mBACbC,cADsB,KAStB,CACEC,UAAW,CACTC,GAAIL,GAENM,QAAS,CACPV,eAKN,OAAIK,EAAOM,QACF,wCAGLN,EAAOO,MACF,uCAGLP,EAAOQ,KACF,6BAAMR,EAAOQ,KAAKC,KAAKL,IAGzB,kCAGF,SAASM,IAAO,IAAD,EACUC,IAAMC,UAAS,GADzB,mBACbC,EADa,KACJC,EADI,OAEAH,IAAMC,SAAS,QAFf,mBAEbR,EAFa,KAETW,EAFS,KAGdC,EAAWL,IAAMM,aAAY,WACjCF,EAAMG,IAAMC,OAAOC,QAClB,CAACL,IACEM,EAAUV,IAAMM,aAAY,WAChCH,GAAW,KACV,CAACA,IAEJ,OACE,6BACE,4BAAQQ,QAASD,GAAjB,WACCR,GACC,6BACE,4BAAQS,QAASN,GAAjB,aACA,kBAAClB,EAAD,CAAMC,OAAQK,MCzDxB,IAAMmB,EAAS,IAAIC,eAAa,CAC9BC,wBAAwB,EACxBC,MAAO,IAAIC,gBAAc,CACvBC,aAAa,EACbC,eAAe,IAEjBC,UAAW,CACTC,MAAO,CACCtB,KADD,SACMuB,EADN,GACkB,OAAD,iHAAN5B,EAAM,EAANA,GAAM,kBACb,CACLA,KACA6B,MAAM,gBAAD,OAAkB7B,KAHL,kDAU5B8B,IAASC,OACL,kBAAC,iBAAD,CAAgBZ,OAAQA,GACtB,kBAACb,EAAD,OAEJ0B,SAASC,eAAe,SAGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2b09889a.chunk.js","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/client/react\";\nimport { gql } from \"@apollo/client/core\";\nimport faker from \"faker\";\n\nclass SingletonObject {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nconst singleton = new SingletonObject(`fooobaarbaz`);\n\nfunction Item({ itemId }) {\n  const result = useQuery(\n    gql`\n      query item($id: String!) {\n        item(id: $id) @client {\n          id\n          value\n        }\n      }\n    `,\n    {\n      variables: {\n        id: itemId,\n      },\n      context: {\n        singleton,\n      },\n    }\n  );\n\n  if (result.loading) {\n    return <div>loading</div>;\n  }\n\n  if (result.error) {\n    return <div>failed</div>;\n  }\n\n  if (result.data) {\n    return <div>{result.data.item.id}</div>;\n  }\n\n  return <div>?</div>;\n}\n\nexport function App() {\n  const [mounted, setMounted] = React.useState(true);\n  const [id, setId] = React.useState(\"init\");\n  const updateId = React.useCallback(() => {\n    setId(faker.random.word);\n  }, [setId]);\n  const unmount = React.useCallback(() => {\n    setMounted(false);\n  }, [setMounted]);\n\n  return (\n    <div>\n      <button onClick={unmount}>Unmount</button>\n      {mounted && (\n        <div>\n          <button onClick={updateId}>Random id</button>\n          <Item itemId={id} />\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nimport { ApolloClient, InMemoryCache } from \"@apollo/client/core\";\nimport { ApolloProvider } from \"@apollo/client/react\";\n\nconst client = new ApolloClient({\n  assumeImmutableResults: true,\n  cache: new InMemoryCache({\n    addTypename: true,\n    resultCaching: true,\n  }),\n  resolvers: {\n    Query: {\n      async item(_, { id }) {\n        return {\n          id,\n          value: `value-for-id-${id}`,\n        };\n      },\n    },\n  },\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.ready.then(registration => {\n    registration.unregister();\n  });\n}"],"sourceRoot":""}